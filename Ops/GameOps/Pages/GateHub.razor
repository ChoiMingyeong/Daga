@page "/gatehub"
@attribute [Authorize]

@inject GateHubService GateHubService

<h3>GateHub</h3>

<div>
    <button @onclick="RefreshAsync">Refresh</button>
    <table border="1">
        <thead style="border-bottom: 1px solid">
            <tr>
                <th>Version</th>
                <th>State</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var gate in gates)
            {
                <tr>
                    <td>@gate.Version</td>
                    <td>
                        @if (selectedIndex == gates.IndexOf(gate))
                        {
                            <input @bind-value=@gate.State />
                            <button @onclick="()=>OnUpdateButtonClicked(gate)">Update</button>
                            <button @onclick="()=>UnselectItem()">Cancel</button>
                        }
                        else
                        {
                            <span @onclick="()=>SelectItem(gate)">@gate.State</span>
                            <button @onclick="()=>OnDeleteButtonClicked(gate.Version)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div>
    <span>Version: </span>
    <input @bind-value=inputVersionText />
    <span>State: </span>
    <input @bind-value=inputStateText />
    <button @onclick="OnCreateButtonClicked">Create</button>
</div>

<div>
    <span>Version: </span>
    <input @bind-value=gateHubVersion />
    <button @onclick="OnGateHubButtonClicked">GateHub</button>
    <p>@gateHubResult</p>
</div>

@code {
    private string inputVersionText = string.Empty;
    private string inputStateText = string.Empty;
    private List<OpsCommon.Gate> gates = [];
    private string gateHubVersion = string.Empty;
    private string gateHubResult = string.Empty;
    private int selectedIndex = -1;
    private string selectedItem = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        gates = await GateHubService.GetListAsync();
    }

    private async Task RefreshAsync()
    {
        gates = await GateHubService.GetListAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCreateButtonClicked()
    {
        await GateHubService.CreateAsync(new OpsCommon.Gate { Version = inputVersionText, State = inputStateText });
        await RefreshAsync();
    }

    private async Task OnUpdateButtonClicked(OpsCommon.Gate gate)
    {
        await UnselectItem(false);
        await GateHubService.UpdateAsync(gate);
        await RefreshAsync();
    }

    private async Task OnDeleteButtonClicked(string version)
    {
        await UnselectItem();
        await GateHubService.DeleteAsync(version);
        await RefreshAsync();
    }

    private async Task OnGateHubButtonClicked()
    {
        gateHubResult = await GateHubService.GateHubAsync(gateHubVersion);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectItem(OpsCommon.Gate gate)
    {
        selectedIndex = gates.IndexOf(gate);
        selectedItem = gate.State;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UnselectItem(bool reset = true)
    {
        if (selectedIndex != -1 && false == string.IsNullOrEmpty(selectedItem) && true == reset)
        {
            gates[selectedIndex].State = selectedItem;
        }

        selectedIndex = -1;
        selectedItem = string.Empty;
        await InvokeAsync(StateHasChanged);
    }
}
