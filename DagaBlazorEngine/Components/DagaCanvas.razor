@using Microsoft.JSInterop
@using System.Numerics

<canvas @ref="_canvasRef" width="@CanvasWidth" height="@CanvasHeight" />
<button style=@($"position:absolute; top:{CanvasHeight/2}px; left:{CanvasWidth/2}px; width:{CanvasWidth * 0.1}px; height:{CanvasWidth * 0.1}px; border:none; padding:0; background:transparent;")>
    <img src="~/icon-512.png" style="width: 100%; height: 100%;" />
</button>

@code {
    private ElementReference _canvasRef;
    private DotNetObjectReference<DagaCanvas>? _dotNetRef;
    private IJSObjectReference? _screenSizeModule;
    private IJSObjectReference? _canvasModule;

    public int CanvasWidth { get; private set; }
    public int CanvasHeight { get; private set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            _screenSizeModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/_content/DagaBlazorEngine/js/screenSizeModule.js");
            _canvasModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/_content/DagaBlazorEngine/js/canvasHelper.js");
            await _screenSizeModule.InvokeVoidAsync("resizeCallback", _dotNetRef);
        }

        await UpdateAsync();
    }

    [JSInvokable]
    public async Task OnResize(ScreenSize screenSize)
    {
        CanvasWidth = (int)screenSize.X;
        CanvasHeight = (int)screenSize.Y;

        await UpdateAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async Task UpdateAsync()
    {
        if (null == _canvasModule)
            return;

        // 캔버스 다시 그리기 로직
        await _canvasModule.InvokeVoidAsync("drawRectangle", _canvasRef, 0, 0, CanvasWidth/2, CanvasHeight/2);
    }

    public async ValueTask DisposeAsync()
    {
        _dotNetRef?.Dispose();
        if (_screenSizeModule is not null)
            await _screenSizeModule.DisposeAsync();
        if (_canvasModule is not null)
            await _canvasModule.DisposeAsync();
    }
}
