@using Microsoft.JSInterop
@using System.Numerics

<canvas @ref="_canvasRef" />

@code {
    private ElementReference _canvasRef;
    private IJSObjectReference? _canvasModule;
    private IJSObjectReference? _screenSizeModule;

    private int CanvasWidth;
    private int CanvasHeight;

    private float x = 0f;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _screenSizeModule = await JS.InvokeAsync<IJSObjectReference>("import", "/_content/DagaBlazorEngine/js/module-screensize.js");
            _canvasModule = await JS.InvokeAsync<IJSObjectReference>("import", "/_content/DagaBlazorEngine/js/canvas.js");
            await _canvasModule.InvokeVoidAsync("init", _canvasRef);
            await Task.Run(StartRenderLoopAsync);
        }
    }

    private async Task StartRenderLoopAsync()
    {
        while (true)
        {
            x += 1f;

            var size = await _screenSizeModule!.InvokeAsync<ScreenSize>("getScreenSize");
            x %= size.w;

            if (_canvasModule is not null)
            {
                await _canvasModule.InvokeVoidAsync("drawBegin");
                await _canvasModule.InvokeVoidAsync("drawFillRect", 100 + x, 100, 200, 80, "blue");
                await _canvasModule.InvokeVoidAsync("drawStrokeRect", 0 + x, 0, 100, 100);
                await _canvasModule.InvokeVoidAsync("drawEnd");
            }

            await InvokeAsync(StateHasChanged);
            await Task.Delay(16); // 약 60fps (1000ms / 60 ≈ 16ms)
        }
    }
}