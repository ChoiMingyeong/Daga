@page "/"
@attribute [Authorize]

<MudContainer>
    <MudStack>
        <MudItem>
            <MudText Typo="Typo.h6">
                Favorites
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="@(async ()=>await InvokeAsync(StateHasChanged))" />
            </MudText>
        </MudItem>
        <MudItem>
            <MudCarousel Style="height:200px;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" TData="object">
                @for (int i = 0; i < GetCarouselPaperCount(FavoriteProjects); ++i)
                {
                    <MudCarouselItem Transition="Transition.Slide">
                        <MudGrid Justify="Justify.FlexStart">
                            @for (int j = 0; j < DisplayItemCount; ++j)
                            {
                                var pageItems = FavoriteProjects.Take(new Range(DisplayItemCount * i, DisplayItemCount * (i + 1)));
                                @foreach (var project in pageItems)
                                {
                                    <ProjectCard Project="project" />
                                }
                            }
                        </MudGrid>
                    </MudCarouselItem>
                }
            </MudCarousel>
        </MudItem>
        <MudItem>
            <ProjectDisplayPanel TitleText="All Projects" Reset="true" />
        </MudItem>
    </MudStack>
</MudContainer>

@code
{
    private readonly int DisplayItemCount = 10;
    private List<DagaCommon.Models.Project> FavoriteProjects => AuthService.Projects.Where(p => p.Favorite).ToList();

    private int GetCarouselPaperCount(in List<DagaCommon.Models.Project> projects)
    {
        int pageCount = (projects.Count / DisplayItemCount);
        if (pageCount == 0)
        {
            return 1;
        }
        pageCount += (projects.Count % DisplayItemCount == 0) ? 0 : 1;
        return pageCount;
    }

    private async Task OnCreateProjectButtonClicked()
    {
        var projectCount = AuthService.Projects.Count + 1;
        await AuthService.CreateProjectAsync($"Test Project {projectCount}", $"This is test project {projectCount}.");
        await InvokeAsync(StateHasChanged);
    }
}